import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,e,b as i,d as a,g as k,r as l,o as d}from"./app-CnhqT0GY.js";const o={};function c(g,s){const t=l("HopeIcon"),h=l("RouteLink");return d(),p("div",null,[s[7]||(s[7]=n('<h1 id="评测服务器开发日志" tabindex="-1"><a class="header-anchor" href="#评测服务器开发日志"><span>评测服务器开发日志</span></a></h1><h2 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h2><p>该服务器部署在 qcloud 上，可分为两个部分：webserver 和 judger。</p><ul><li>webserver 基于 gunicorn + nginx 部署，用于接收提交文件、提供静态文件和响应结果查询；</li><li>judger 由 teacher why 提供，用于评测提交文件。</li></ul><p>二者完全解耦，可部署在不同的服务器之上：judger 会通过 ssh 连接到 webserver，来拉取提交文件；完成评测后，再将结果写入 webserver。当然，由于 ssh 的目标可以是 localhost，二者也可以部署于同一服务器上。</p><blockquote><p>webserver 的所有接口均来自于 judger 中的相关调用，以及<a href="http://www.why.ink:8080/ICS/2022/labs/Labs" target="_blank" rel="noopener noreferrer">实验须知</a>。</p></blockquote><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>Config</span></a></h2><h3 id="proxies" tabindex="-1"><a class="header-anchor" href="#proxies"><span>Proxies</span></a></h3><ol><li>bashrc 中的 http_proxy、https_proxy、PROXY（used in v2ray download script）。 注意在切换到不同用户时，特别是 sudo 切换到 root 时, 需要保证该用户目录下有设置。</li><li>/etc/apt/apt.conf：用于配置 apt 的代理。但是透过该代理无法访问腾讯云的 apt source。</li><li>/etc/systemd/system/docker.service.d：docker pull 的代理.</li></ol><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h3>',10)),e(t,{icon:"book"}),s[8]||(s[8]=n(` <a href="https://github.com/xitu/gold-miner/blob/master/TODO/how-to-configure-nginx-for-a-flask-web-application.md" target="_blank" rel="noopener noreferrer"><strong>tutorial</strong></a><p>nginx 采用了层次化的配置，其中，有关 http、events 的配置（作用于全部 server）位于 /etc/nginx/nginx.conf，而有关代理服务器的配置，则位于 /etc/nginx/sites-available/server-name：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">175.24.131.173</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_pass </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http://127.0.0.1:8080;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Host $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Real-IP $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Forwarded-For $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        proxy_set_header </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X-Forwarded-Proto $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    client_max_body_size </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12M</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项解释如下：</p>`,5)),i("ul",null,[s[4]||(s[4]=i("li",null,[i("strong",null,"listen"),a("：nginx 的监听端口（并不是指 nginx 只会代理来自这个端口的流量）；")],-1)),s[5]||(s[5]=i("li",null,[i("strong",null,"server_name"),a("：代理的主机名。当同一服务器对应了多个 ip、hostname 时，可以使用该配置项进行区分；")],-1)),i("li",null,[s[1]||(s[1]=i("strong",null,"location",-1)),s[2]||(s[2]=a("：针对符合某种特征的 url 请求的响应规则。这里将所有请求都转发给了后端的 gunicorn 服务器。一个")),e(h,{to:"/todo.html"},{default:k(()=>s[0]||(s[0]=[a("更好的做法")])),_:1}),s[3]||(s[3]=a("是由 nginx 来处理静态文件的请求。"))]),s[6]||(s[6]=i("li",null,[i("strong",null,"client_max_body_size"),a("：允许上传的最大大小。")],-1))]),s[9]||(s[9]=n(`<h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h3><p>judger 会运行 docker 来进行评测：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">args </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;docker&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;run&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--rm&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;-i&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;-t&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--network&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;none&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;-m&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2048m&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Memory limit</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, name,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;-u&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--tmpfs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/dev/shm:exec&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--shm-size=1536m&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--ipc&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;private&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--cap-add&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;SYS_PTRACE&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--ulimit&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cpu=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cpu_rlim</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cpu_rlim</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CPU runtime limit</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;--mount&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;type=bind,source=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._path</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,target=/shared&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._img ] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bash&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/shared/entry-root.sh&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      retcode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> subprocess.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        args,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        stdin</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fdopen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(master_fd),</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        stdout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">subprocess.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">PIPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        stderr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">subprocess.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">STDOUT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">timeout,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 self._img = sandbox22。那么，该如何配置 sandbox22 这个 image 呢？注意到在 docker/container 目录下有 sandbox22.docker 文件：</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" data-title="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ubuntu22:ics</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DEBIAN_FRONTEND=noninteractive</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> change-source.sh /tmp/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> useradd -ms /bin/bash oj</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> useradd -ms /bin/bash admin</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> usermod -u 1000 oj  // change uid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> groupmod -g 1000 oj // change uid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> oj</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /home/oj</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在该 dockerfile 中，对基准 image ubuntu22:ics 进行了一系列的初始化。因此，我们只需要按照 PA guidebook 中的<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2024/0.3.html#installing-tools-for-pas" target="_blank" rel="noopener noreferrer">相关章节</a>，安装运行所需的库，并将安装完环境的 ubuntu22.04 image 注册为 ubuntu22:ics，再通过如下命令构建 sandbox22 image：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/sandbox22.docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>值得注意的是其中的 usermod 与 groupmod 的设置。对于一个目录，其所有权是根据 uid 来分配的。当该目录被共享至容器中时，容器中<strong>拥有相同 uid 的用户</strong>会获得所有权。因此，为了保证容器中的用户 oj 能够对 workspace 写入，必须使得 oj 与 host 中的 ubuntu（uid = 1000）的 uid 一致。</p></div><h2 id="issues" tabindex="-1"><a class="header-anchor" href="#issues"><span>Issues</span></a></h2><h3 id="upload-failure" tabindex="-1"><a class="header-anchor" href="#upload-failure"><span>Upload Failure</span></a></h3><ul><li><p>当上传文件过大（70MB+）时，会出现 (56) Recv failure: Connection reset by peer 和 (55) Send failure: Broken pipe。但这是异常的提交文件大小。经检查发现，该提交文件包含并在 git 中追踪了过大的 pdf 文件（50MB+），而在文件大小正常（10MB-）的情况下，提交并不会出错。因此，选择限制上传文件大小，并指导使用 git-filter-repo 将曾经 track 过的大文件从记录中删掉。</p></li><li><p>当通过代理上传文件时，即使是小文件，也可能出现客户端接收不到 [SUCC ✓] 回复的情况。因此，只需要在提交时 unset http_proxy 即可。</p></li></ul><h3 id="gcc-multilib-riscv-conflict" tabindex="-1"><a class="header-anchor" href="#gcc-multilib-riscv-conflict"><span>gcc-multilib &amp; riscv conflict</span></a></h3><p>gcc-multilib 和 g++-riscv64-linux-gnu 存在冲突，安装其一，apt 会移除另一。但是，先安装前者，后安装后者，会使得 gcc-multilib 被（错误？）保留。</p><h3 id="stuck-on-judged-submissions" tabindex="-1"><a class="header-anchor" href="#stuck-on-judged-submissions"><span>Stuck on Judged Submissions</span></a></h3><p>如果是在 find.py 中就通过 os.path.exists(f&#39;{fname}.result&#39;) 筛除掉已评测的提交，在小于1s内即可完成，后续只会遍历未评测的提交。 但如果“在这里先把所有的提交记录都找出来, 后续只对没有对应result文件的提交进行评测”， 即使禁用了 debug 输出，例如 “skipping judged submit”、“Invoke submit [submit_id]” ，仍然会很慢，大约需要 3-5 分钟来遍历已评测的提交。原因是，这些无用的提交会经历一系列预处理，由于庞大的数量，这些操作会很耗时。自然要采用前者。</p><h3 id="vastly-runtime-for-the-same-code" tabindex="-1"><a class="header-anchor" href="#vastly-runtime-for-the-same-code"><span>Vastly Runtime for the Same Code</span></a></h3><p>在 Lab3 的评测中，发现对于同一份代码，评测得到的加速比差距很大（能达到25%）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>root@0eb1fce04bc5:/shared/shared/ics-env/perftune# ./perftune-64 hard</span></span>
<span class="line"><span>n = 9999998</span></span>
<span class="line"><span>naive[1609100935.000000], sub[154156502.000000]</span></span>
<span class="line"><span>[[all-tests-passed]]</span></span>
<span class="line"><span>=[[[-speedup-10.4381-]]]=</span></span>
<span class="line"><span>root@0eb1fce04bc5:/shared/shared/ics-env/perftune# ./perftune-64 hard</span></span>
<span class="line"><span>n = 9999998</span></span>
<span class="line"><span>naive[1358157781.000000], sub[152781548.000000]</span></span>
<span class="line"><span>[[all-tests-passed]]</span></span>
<span class="line"><span>=[[[-speedup-8.8895-]]]=</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，这种情况在本地机器上无法复现。其次，通过使用 <code>rdtscp</code> 、 <code>clock_gettime()</code> 对框架中的 <code>rdtsc</code> 进行替换，发现结果皆是如此，并且使用 <code>time ./perftune-64 hard</code> 计时，发现时间与现实时间一致。综上所述，问题在于 <code>naive</code> 确实运行时间差异很大。同时注意到，运行时间较短的 sub，其时间波动较小。因此，猜测是长时间运行的程序会触发云服务器的资源调度变化，从而导致较大的时间波动，并且这个影响远大于系统的本身调度（按理说时间短的程序，时间波动更大）。</p>`,19))])}const B=r(o,[["render",c],["__file","oj-server-devlog.html.vue"]]),y=JSON.parse('{"path":"/work/ics/oj-server-devlog.html","title":"评测服务器开发日志","lang":"en-US","frontmatter":{"cover":"/assets/images/work/ics/oj-server-devlog/cover.png","icon":"pen-to-square","date":"2024-10-18T00:00:00.000Z","category":["server config","ics ta work"],"tag":["web-backend","qcloud","docker","apt"],"star":true,"sticky":true,"excerpt":"<p> 评测服务器相关的架构、配置以及常见问题。 </p>","description":"评测服务器开发日志 Architecture 该服务器部署在 qcloud 上，可分为两个部分：webserver 和 judger。 webserver 基于 gunicorn + nginx 部署，用于接收提交文件、提供静态文件和响应结果查询； judger 由 teacher why 提供，用于评测提交文件。 二者完全解耦，可部署在不同的服务器之...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://zhangmxxx.github.io/BlogSite/work/ics/oj-server-devlog.html"}],["meta",{"property":"og:site_name","content":"Site MallocSimenons"}],["meta",{"property":"og:title","content":"评测服务器开发日志"}],["meta",{"property":"og:description","content":"评测服务器开发日志 Architecture 该服务器部署在 qcloud 上，可分为两个部分：webserver 和 judger。 webserver 基于 gunicorn + nginx 部署，用于接收提交文件、提供静态文件和响应结果查询； judger 由 teacher why 提供，用于评测提交文件。 二者完全解耦，可部署在不同的服务器之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zhangmxxx.github.io/BlogSite/assets/images/work/ics/oj-server-devlog/cover.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://zhangmxxx.github.io/BlogSite/assets/images/work/ics/oj-server-devlog/cover.png"}],["meta",{"name":"twitter:image:alt","content":"评测服务器开发日志"}],["meta",{"property":"article:tag","content":"web-backend"}],["meta",{"property":"article:tag","content":"qcloud"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"apt"}],["meta",{"property":"article:published_time","content":"2024-10-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"评测服务器开发日志\\",\\"image\\":[\\"https://zhangmxxx.github.io/BlogSite/assets/images/work/ics/oj-server-devlog/cover.png\\"],\\"datePublished\\":\\"2024-10-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MallocSimenons\\",\\"url\\":\\"https://zhangmxxx.github.io/BlogSite/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"Architecture","slug":"architecture","link":"#architecture","children":[]},{"level":2,"title":"Config","slug":"config","link":"#config","children":[{"level":3,"title":"Proxies","slug":"proxies","link":"#proxies","children":[]},{"level":3,"title":"Nginx","slug":"nginx","link":"#nginx","children":[]},{"level":3,"title":"Docker","slug":"docker","link":"#docker","children":[]}]},{"level":2,"title":"Issues","slug":"issues","link":"#issues","children":[{"level":3,"title":"Upload Failure","slug":"upload-failure","link":"#upload-failure","children":[]},{"level":3,"title":"gcc-multilib & riscv conflict","slug":"gcc-multilib-riscv-conflict","link":"#gcc-multilib-riscv-conflict","children":[]},{"level":3,"title":"Stuck on Judged Submissions","slug":"stuck-on-judged-submissions","link":"#stuck-on-judged-submissions","children":[]},{"level":3,"title":"Vastly Runtime for the Same Code","slug":"vastly-runtime-for-the-same-code","link":"#vastly-runtime-for-the-same-code","children":[]}]}],"readingTime":{"minutes":4.92,"words":1477},"filePathRelative":"work/ics/oj-server-devlog.md","localizedDate":"October 18, 2024","autoDesc":true}');export{B as comp,y as data};
